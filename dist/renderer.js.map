{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","moment","DataTable","DatatableRenderer","panel","table","isUtc","sanitize","linkSrv","formatters","colorState","value","style","thresholds","i","length","colors","_","first","v","undefined","isArray","join","escape","column","defaultCellFormatter","type","date","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","colorMode","getColorForValue","decimals","colIndex","styles","columns","regex","stringToJsRegex","pattern","text","match","createColumnFormatter","rowData","formattedRowData","y","row","rows","cellData","formatColumnValue","hidden","formatDrilldown","push","rowNumbersEnabled","unshift","columnNumber","colStyle","items","split","bgColor","bgColorIndex","color","colorIndex","isNaN","parseFloat","replace","getStyleForColumn","cell","rowcolumn","getColorIndexForValue","columnDefs","_this","rowNumberOffset","title","header","td","col","css","fontSize","actualColumn","rowColor","rowColorIndex","rowColorData","getCellColors","parentNode","children","aChild","colorData","should_destroy","fn","dataTable","isDataTable","id","aDT","destroy","empty","err","console","log","message","formattedData","generateFormattedData","panelHeight","orderSetting","sortField","sortDirection","tableOptions","searching","searchEnabled","info","infoEnabled","lengthChange","lengthChangeEnabled","scrollCollapse","saveState","data","responsive","enable","dom","buttons","scroll","paging","scrollY","pagingType","datatablePagingType","collection","columnsToggle","columnsVisibility","columnToggle","columnVisibility","colvis","colvisGroup","colvisRestore","copy","copyHtml5","print","pageLength","csv","csvHtml5","excel","excelHtml5","pdf","pdfHtml5","selectAll","selectNone","selectCells","selectColumns","selectRows","newDT","visible","compactRowsEnabled","addClass","stripedRowsEnabled","hoverEnabled","orderColumnEnabled","showCellBorders","showRowBorders","rowsPerPage","page","len","draw","on","search","order","nodes","each","innerHTML","columnHeader","columnIndex","drilldowns","drilldown","regexp","RegExp","alias","columnText","test","scopedVars","j","separator","trim","values","repeat","link","getPanelLinkAnchorInfo","target","href","new_row"],"mappings":"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","file":"renderer.js","sourcesContent":["import $ from 'jquery';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport moment from 'moment';\r\nimport DataTable from './libs/datatables.net/js/jquery.dataTables.min.js';\r\n\r\n\r\nexport class DatatableRenderer {\r\n    constructor(panel, table, isUtc, sanitize, linkSrv) {\r\n        this.formatters = [];\r\n        this.colorState = {};\r\n        this.panel = panel;\r\n        this.table = table;\r\n        this.isUtc = isUtc;\r\n        this.sanitize = sanitize;\r\n        this.linkSrv = linkSrv;\r\n    }\r\n\r\n    /**\r\n     * Given a value, return the color corresponding to the threshold set\r\n     * @param  {[Float]} value [Value to be evaluated]\r\n     * @param  {[Array]} style [Settings containing colors and thresholds]\r\n     * @return {[String]}       [color]\r\n     */\r\n    getColorForValue(value, style) {\r\n        if (!style.thresholds) {\r\n            return null;\r\n        }\r\n        for (var i = style.thresholds.length; i > 0; i--) {\r\n            if (value >= style.thresholds[i - 1]) {\r\n                return style.colors[i];\r\n            }\r\n        }\r\n        return _.first(style.colors);\r\n    }\r\n\r\n    // to determine the overall row color, the index of the threshold is needed\r\n    getColorIndexForValue(value, style) {\r\n        if (!style.thresholds) {\r\n            return null;\r\n        }\r\n        for (var i = style.thresholds.length; i > 0; i--) {\r\n            if (value >= style.thresholds[i - 1]) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * [defaultCellFormatter description]\r\n     * @param  {[type]} v     [description]\r\n     * @param  {[type]} style [description]\r\n     * @return {[type]}       [description]\r\n     */\r\n    defaultCellFormatter(v, style) {\r\n        if (v === null || v === void 0 || v === undefined) {\r\n            return '';\r\n        }\r\n        if (_.isArray(v)) {\r\n            v = v.join(', ');\r\n        }\r\n        if (style && style.sanitize) {\r\n            return this.sanitize(v);\r\n        } else {\r\n            return _.escape(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [createColumnFormatter description]\r\n     * @param  {[type]} style  [description]\r\n     * @param  {[type]} column [description]\r\n     * @return {[type]}        [description]\r\n     */\r\n    createColumnFormatter(style, column) {\r\n        if (!style) {\r\n            return this.defaultCellFormatter;\r\n        }\r\n        if (style.type === 'hidden') {\r\n            return v => {\r\n                return undefined;\r\n            };\r\n        }\r\n        if (style.type === 'date') {\r\n            return v => {\r\n                if (v === undefined || v === null) {\r\n                    return '-';\r\n                }\r\n                if (_.isArray(v)) {\r\n                    v = v[0];\r\n                }\r\n                var date = moment(v);\r\n                if (this.isUtc) {\r\n                    date = date.utc();\r\n                }\r\n                return date.format(style.dateFormat);\r\n            };\r\n        }\r\n        if (style.type === 'number') {\r\n            let valueFormatter = kbn.valueFormats[column.unit || style.unit];\r\n            return v => {\r\n                if (v === null || v === void 0) {\r\n                    return '-';\r\n                }\r\n                if (_.isString(v)) {\r\n                    return this.defaultCellFormatter(v, style);\r\n                }\r\n                if (style.colorMode) {\r\n                    this.colorState[style.colorMode] = this.getColorForValue(v, style);\r\n                }\r\n                return valueFormatter(v, style.decimals, null);\r\n            };\r\n        }\r\n        return (value) => {\r\n            return this.defaultCellFormatter(value, style);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * [formatColumnValue description]\r\n     * @param  {[type]} colIndex [description]\r\n     * @param  {[type]} value    [description]\r\n     * @return {[type]}          [description]\r\n     */\r\n    formatColumnValue(colIndex, value) {\r\n        if (this.formatters[colIndex]) {\r\n            return this.formatters[colIndex](value);\r\n        }\r\n\r\n        for (let i = 0; i < this.panel.styles.length; i++) {\r\n            let style = this.panel.styles[i];\r\n            let column = this.table.columns[colIndex];\r\n            var regex = kbn.stringToJsRegex(style.pattern);\r\n            if (column.text.match(regex)) {\r\n                this.formatters[colIndex] = this.createColumnFormatter(style, column);\r\n                return this.formatters[colIndex](value);\r\n            }\r\n        }\r\n\r\n        this.formatters[colIndex] = this.defaultCellFormatter;\r\n        return this.formatters[colIndex](value);\r\n    }\r\n\r\n    /**\r\n     * [generateFormattedData description]\r\n     * @param  {[type]} rowData [description]\r\n     * @return {[type]}         [description]\r\n     */\r\n    generateFormattedData(rowData) {\r\n        let formattedRowData = [];\r\n        for (var y = 0; y < rowData.length; y++) {\r\n            let row = this.table.rows[y];\r\n            let cellData = [];\r\n            //cellData.push('');\r\n            for (var i = 0; i < this.table.columns.length; i++) {\r\n                let value = this.formatColumnValue(i, row[i]);\r\n                if (value === undefined) {\r\n                    this.table.columns[i].hidden = true;\r\n                } else {\r\n                    //this.table.columns[i].text\r\n                    value = this.formatDrilldown(this.table.columns, row, i, value, this.panel, this.linkSrv);\r\n                }\r\n                cellData.push(value);\r\n            }\r\n            if (this.panel.rowNumbersEnabled) {\r\n                cellData.unshift('rowCounter');\r\n            }\r\n            formattedRowData.push(cellData);\r\n        }\r\n        return formattedRowData;\r\n    }\r\n\r\n    getStyleForColumn(columnNumber) {\r\n        let colStyle = null;\r\n        for (let i = 0; i < this.panel.styles.length; i++) {\r\n            let style = this.panel.styles[i];\r\n            let column = this.table.columns[columnNumber];\r\n            if (column === undefined) break;\r\n            var regex = kbn.stringToJsRegex(style.pattern);\r\n            if (column.text.match(regex)) {\r\n                colStyle = style;\r\n                break;\r\n            }\r\n        }\r\n        return colStyle;\r\n    }\r\n\r\n    getCellColors(colorState, columnNumber, cellData) {\r\n        var items = cellData.split(/(\\s+)/);\r\n        // only color cell if the content is a number?\r\n        var bgColor = null;\r\n        var bgColorIndex = null;\r\n        var color = null;\r\n        var colorIndex = null;\r\n        let colStyle = null;\r\n        let value = null;\r\n        // check if the content has a numeric value after the split\r\n        if (!isNaN(items[0])) {\r\n            // run value through threshold function\r\n            value = parseFloat(items[0].replace(\",\", \".\"));\r\n            colStyle = this.getStyleForColumn(columnNumber);\r\n        }\r\n        if (colStyle !== null) {\r\n            // check color for either cell or row\r\n            if ((colorState.cell) || (colorState.row) || (colorState.rowcolumn)) {\r\n                // bgColor = _this.colorState.cell;\r\n                bgColor = this.getColorForValue(value, colStyle);\r\n                bgColorIndex = this.getColorIndexForValue(value, colStyle);\r\n                color = 'white';\r\n            }\r\n            // just the value color is set\r\n            if (colorState.value) {\r\n                //color = _this.colorState.value;\r\n                color = this.getColorForValue(value, colStyle);\r\n                colorIndex = this.getColorIndexForValue(value, colStyle);\r\n            }\r\n        }\r\n        return {\r\n            bgColor: bgColor,\r\n            bgColorIndex: bgColorIndex,\r\n            color: color,\r\n            colorIndex: colorIndex\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Construct table using Datatables.net API\r\n     *  multiple types supported\r\n     * timeseries_to_rows (column 0 = timestamp)\r\n     * timeseries_to_columns\r\n     * timeseries_aggregations - column 0 is the metric name (series name, not a timestamp)\r\n     * annotations - specific headers for this\r\n     * table\r\n     * json (raw)\r\n     * columns[x].type === \"date\" then set columndefs to parse the date, otherwise leave it as default\r\n     * convert table.columns[N].text to columns formatted to datatables.net format\r\n     * @return {[Boolean]} True if loaded without errors\r\n     */\r\n    render() {\r\n        if (this.table.columns.length === 0) return;\r\n        var columns = [];\r\n        var columnDefs = [];\r\n        var _this = this;\r\n        var rowNumberOffset = 0;\r\n        if (this.panel.rowNumbersEnabled) {\r\n            rowNumberOffset = 1;\r\n            columns.push({\r\n                title: '',\r\n                type: 'number'\r\n            });\r\n            columnDefs.push(\r\n                {\r\n                    \"searchable\": false,\r\n                    \"orderable\": false,\r\n                    \"targets\": 0,\r\n                    \"width\": \"1%\",\r\n                });\r\n        }\r\n        for (let i = 0; i < this.table.columns.length; i++) {\r\n            /* jshint loopfunc: true */\r\n            var style = this.getStyleForColumn(i);\r\n\r\n            columns.push({\r\n                title: style != void 0 && style.header != void 0 ? style.header : this.table.columns[i].text,\r\n                type: this.table.columns[i].type\r\n            });\r\n            columnDefs.push(\r\n                {\r\n                    \"targets\": i + rowNumberOffset,\r\n                    \"createdCell\": function (td, cellData, rowData, row, col) {\r\n                        // hidden columns have null data\r\n                        if (cellData === null) return;\r\n                        // set the fontsize for the cell\r\n                        $(td).css('font-size', _this.panel.fontSize);\r\n                        // undefined types should have numerical data, any others are already formatted\r\n                        let actualColumn = col;\r\n                        if (_this.panel.rowNumbersEnabled) {\r\n                            actualColumn -= 1;\r\n                        }\r\n                        if (_this.table.columns[actualColumn].type !== undefined) return;\r\n                        // for coloring rows, get the \"worst\" threshold\r\n                        var rowColor = null;\r\n                        var color = null;\r\n                        var rowColorIndex = null;\r\n                        var rowColorData = null;\r\n                        if (_this.colorState.row) {\r\n                            // run all of the rowData through threshold check, get the \"highest\" index\r\n                            // and use that for the entire row\r\n                            if (rowData === null) return;\r\n                            rowColorIndex = -1;\r\n                            rowColorData = null;\r\n                            rowColor = _this.colorState.row;\r\n                            // this should be configurable...\r\n                            color = 'white';\r\n                            for (let columnNumber = 0; columnNumber < _this.table.columns.length; columnNumber++) {\r\n                                // only columns of type undefined are checked\r\n                                if (_this.table.columns[columnNumber].type === undefined) {\r\n                                    rowColorData = _this.getCellColors(_this.colorState, columnNumber, rowData[columnNumber + rowNumberOffset]);\r\n                                    if (rowColorData.bgColorIndex !== null) {\r\n                                        if (rowColorData.bgColorIndex > rowColorIndex) {\r\n                                            rowColorIndex = rowColorData.bgColorIndex;\r\n                                            rowColor = rowColorData.bgColor;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            // style the entire row (the parent of the td is the tr)\r\n                            // this will color the rowNumber and Timestamp also\r\n                            $(td.parentNode).children().css('color', color);\r\n                            $(td.parentNode).children().css('background-color', rowColor);\r\n                        }\r\n\r\n                        if (_this.colorState.rowcolumn) {\r\n                            // run all of the rowData through threshold check, get the \"highest\" index\r\n                            // and use that for the entire row\r\n                            if (rowData === null) return;\r\n                            rowColorIndex = -1;\r\n                            rowColorData = null;\r\n                            rowColor = _this.colorState.rowcolumn;\r\n                            // this should be configurable...\r\n                            color = 'white';\r\n                            for (let columnNumber = 0; columnNumber < _this.table.columns.length; columnNumber++) {\r\n                                // only columns of type undefined are checked\r\n                                if (_this.table.columns[columnNumber].type === undefined) {\r\n                                    rowColorData = _this.getCellColors(_this.colorState, columnNumber, rowData[columnNumber + rowNumberOffset]);\r\n                                    if (rowColorData.bgColorIndex !== null) {\r\n                                        if (rowColorData.bgColorIndex > rowColorIndex) {\r\n                                            rowColorIndex = rowColorData.bgColorIndex;\r\n                                            rowColor = rowColorData.bgColor;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            // style the rowNumber and Timestamp column\r\n                            // the cell colors will be determined in the next phase\r\n                            if (_this.table.columns[0].type !== undefined) {\r\n                                var children = $(td.parentNode).children();\r\n                                var aChild = children[0];\r\n                                $(aChild).css('color', color);\r\n                                $(aChild).css('background-color', rowColor);\r\n                                // the 0 column contains the row number, if they are enabled\r\n                                // then the above just filled in the color for the row number,\r\n                                // now take care of the timestamp\r\n                                if (_this.panel.rowNumbersEnabled) {\r\n                                    aChild = children[1];\r\n                                    $(aChild).css('color', color);\r\n                                    $(aChild).css('background-color', rowColor);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Process cell coloring\r\n                        // Two scenarios:\r\n                        //    1) Cell coloring is enabled, the above row color is skipped\r\n                        //    2) RowColumn is enabled, the above row color is process, but we also\r\n                        //    set the cell colors individually\r\n                        var colorData = _this.getCellColors(_this.colorState, actualColumn, cellData);\r\n                        if ((_this.colorState.cell) || (_this.colorState.rowcolumn)) {\r\n                            if (colorData.color !== undefined) {\r\n                                $(td).css('color', colorData.color);\r\n                            }\r\n                            if (colorData.bgColor !== undefined) {\r\n                                $(td).css('background-color', colorData.bgColor);\r\n                            }\r\n                        } else if (_this.colorState.value) {\r\n                            if (colorData.color !== undefined) {\r\n                                $(td).css('color', colorData.color);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        }\r\n\r\n        try {\r\n            var should_destroy = false;\r\n            if ($.fn.dataTable.isDataTable('#datatable-panel-table-' + this.panel.id)) {\r\n                should_destroy = true;\r\n            }\r\n            if (should_destroy) {\r\n                var aDT = $('#datatable-panel-table-' + this.panel.id).DataTable();\r\n                aDT.destroy();\r\n                $('#datatable-panel-table-' + this.panel.id).empty();\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(\"Exception: \" + err.message);\r\n        }\r\n        // sanity check\r\n        // annotations come back as 4 items in an array per row. If the first row content is undefined, then modify to empty\r\n        // since datatables.net throws errors\r\n        if (this.table.rows[0].length === 4) {\r\n            if (this.table.rows[0][0] === undefined) {\r\n                // detected empty annotations\r\n                this.table.rows = [];\r\n            }\r\n        }\r\n        // pass the formatted rows into the datatable\r\n        var formattedData = this.generateFormattedData(this.table.rows);\r\n\r\n        if (this.panel.rowNumbersEnabled) {\r\n            // shift the data to the right\r\n        }\r\n        var panelHeight = this.panel.panelHeight;\r\n        let orderSetting = [[0, 'desc']];\r\n        if (this.panel.sortField !== null) {\r\n            for (var i = 0; i < this.panel.columns.length; i++) {\r\n                if (this.panel.columns[i].value === this.panel.sortField) {\r\n                    if (this.panel.rowNumbersEnabled) {\r\n                        orderSetting = [[i + 1, this.panel.sortDirection]];\r\n                    } else {\r\n                        orderSetting = [[i, this.panel.sortDirection]];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        } else if (this.panel.rowNumbersEnabled) {\r\n            // when row numbers are enabled, show them ascending\r\n            orderSetting = [[0, 'asc']];\r\n        }\r\n\r\n        var tableOptions = {\r\n            \"lengthMenu\": [[5, 10, 15, 25, 50, 75, 100, -1], [5, 10, 25, 50, 75, 100, \"All\"]],\r\n            searching: this.panel.searchEnabled,\r\n            info: this.panel.infoEnabled,\r\n            lengthChange: this.panel.lengthChangeEnabled,\r\n            scrollCollapse: false,\r\n            saveState: true,\r\n            data: formattedData,\r\n            columns: columns,\r\n            columnDefs: columnDefs,\r\n            \"search\": {\r\n                \"regex\": true\r\n            },\r\n            \"order\": orderSetting,\r\n            responsive: this.panel.responsive.enable,\r\n            dom: 'Bfrtip',\r\n            buttons: []\r\n        };\r\n        if (this.panel.scroll) {\r\n            tableOptions.paging = false;\r\n            tableOptions.scrollY = panelHeight;\r\n        } else {\r\n            tableOptions.paging = true;\r\n            tableOptions.pagingType = this.panel.datatablePagingType;\r\n        }\r\n\r\n        if (this.panel.buttons.collection) {\r\n            tableOptions.buttons.push(\"collection\");\r\n        }\r\n\r\n        if (this.panel.buttons.columnsToggle) {\r\n            tableOptions.buttons.push(\"columnsToggle\");\r\n        }\r\n\r\n        if (this.panel.buttons.columnsVisibility) {\r\n            tableOptions.buttons.push(\"columnsVisibility\");\r\n        }\r\n\r\n        if (this.panel.buttons.columnToggle) {\r\n            tableOptions.buttons.push(\"columnToggle\");\r\n        }\r\n\r\n        if (this.panel.buttons.columnVisibility) {\r\n            tableOptions.buttons.push(\"columnVisibility\");\r\n        }\r\n\r\n        if (this.panel.buttons.colvis) {\r\n            tableOptions.buttons.push(\"colvis\");\r\n        }\r\n\r\n        if (this.panel.buttons.colvisGroup) {\r\n            tableOptions.buttons.push(\"colvisGroup\");\r\n        }\r\n\r\n        if (this.panel.buttons.colvisRestore) {\r\n            tableOptions.buttons.push(\"colvisRestore\");\r\n        }\r\n\r\n        if (this.panel.buttons.copy) {\r\n            tableOptions.buttons.push(\"copy\");\r\n        }\r\n\r\n        if (this.panel.buttons.copyHtml5) {\r\n            tableOptions.buttons.push(\"copyHtml5\");\r\n        }\r\n\r\n        if (this.panel.buttons.print) {\r\n            tableOptions.buttons.push(\"print\");\r\n        }\r\n\r\n        if (this.panel.buttons.pageLength) {\r\n            tableOptions.buttons.push(\"pageLength\");\r\n        }\r\n\r\n        if (this.panel.buttons.csv) {\r\n            tableOptions.buttons.push(\"csv\");\r\n        }\r\n\r\n        if (this.panel.buttons.csvHtml5) {\r\n            tableOptions.buttons.push(\"csvHtml5\");\r\n        }\r\n\r\n        if (this.panel.buttons.excel) {\r\n            tableOptions.buttons.push(\"excel\");\r\n        }\r\n\r\n        if (this.panel.buttons.excelHtml5) {\r\n            tableOptions.buttons.push(\"excelHtml5\");\r\n        }\r\n\r\n        if (this.panel.buttons.pdf) {\r\n            tableOptions.buttons.push(\"pdf\");\r\n        }\r\n\r\n        if (this.panel.buttons.pdfHtml5) {\r\n            tableOptions.buttons.push(\"pdfHtml5\");\r\n        }\r\n\r\n        if (this.panel.buttons.selectAll) {\r\n            tableOptions.buttons.push(\"selectAll\");\r\n        }\r\n\r\n        if (this.panel.buttons.selectNone) {\r\n            tableOptions.buttons.push(\"selectNone\");\r\n        }\r\n\r\n        if (this.panel.buttons.selectCells) {\r\n            tableOptions.buttons.push(\"selectCells\");\r\n        }\r\n\r\n        if (this.panel.buttons.selectColumns) {\r\n            tableOptions.buttons.push(\"selectColumns\");\r\n        }\r\n\r\n        if (this.panel.buttons.selectRows) {\r\n            tableOptions.buttons.push(\"selectRows\");\r\n        }\r\n\r\n\r\n\r\n        var newDT = $('#datatable-panel-table-' + this.panel.id).DataTable(tableOptions);\r\n\r\n        // hide columns that are marked hidden\r\n        for (let i = 0; i < this.table.columns.length; i++) {\r\n            if (this.table.columns[i].hidden) {\r\n                newDT.column(i + rowNumberOffset).visible(false);\r\n            }\r\n        }\r\n\r\n        // enable compact mode\r\n        if (this.panel.compactRowsEnabled) {\r\n            $('#datatable-panel-table-' + this.panel.id).addClass('compact');\r\n        }\r\n        // enable striped mode\r\n        if (this.panel.stripedRowsEnabled) {\r\n            $('#datatable-panel-table-' + this.panel.id).addClass('stripe');\r\n        }\r\n        if (this.panel.hoverEnabled) {\r\n            $('#datatable-panel-table-' + this.panel.id).addClass('hover');\r\n        }\r\n        if (this.panel.orderColumnEnabled) {\r\n            $('#datatable-panel-table-' + this.panel.id).addClass('order-column');\r\n        }\r\n        // these two are mutually exclusive\r\n        if (this.panel.showCellBorders) {\r\n            $('#datatable-panel-table-' + this.panel.id).addClass('cell-border');\r\n        } else {\r\n            if (this.panel.showRowBorders) {\r\n                $('#datatable-panel-table-' + this.panel.id).addClass('row-border');\r\n            }\r\n        }\r\n        if (!this.panel.scroll) {\r\n            // set the page size\r\n            if (this.panel.rowsPerPage !== null) {\r\n                newDT.page.len(this.panel.rowsPerPage).draw();\r\n            }\r\n        }\r\n        // function to display row numbers\r\n        if (this.panel.rowNumbersEnabled) {\r\n            newDT.on('order.dt search.dt', function () {\r\n                newDT.column(0, {search: 'applied', order: 'applied'}).nodes().each(function (cell, i) {\r\n                    cell.innerHTML = i + 1;\r\n                });\r\n            }).draw();\r\n        }\r\n    }\r\n\r\n    formatDrilldown(columnHeader, row, columnIndex, value, panel, linkSrv) {\r\n        if (!panel.drilldowns || !linkSrv) {\r\n            return value;\r\n        }\r\n\r\n\r\n        for (var y = 0; y < panel.drilldowns.length; y++) {\r\n            var drilldown = panel.drilldowns[y];\r\n            var regexp = new RegExp(drilldown.alias);\r\n            var columnText = columnHeader[columnIndex].text;\r\n            if (regexp.test(columnText)) {\r\n\r\n                var scopedVars = {};\r\n                for (var j = 0; j < columnHeader.length; j++) {\r\n                    scopedVars[columnHeader[j].text] = {\"value\": row[j]};\r\n                }\r\n\r\n                if (drilldown.separator && drilldown.separator.trim().length > 0) {\r\n                    var values = value.split(new RegExp(drilldown.separator));\r\n                    for (var i = 0; i < values.length; i++) {\r\n                        scopedVars[\"alias\" + i] = {\"value\": values[i]};\r\n                    }\r\n                }\r\n\r\n                //add panel.scopedVars for repeat var\r\n                if (panel.repeat && panel.scopedVars[panel.repeat] && panel.scopedVars[panel.repeat].value) {\r\n                    scopedVars[panel.repeat] = panel.scopedVars[panel.repeat].value;\r\n                }\r\n\r\n                var link = linkSrv.getPanelLinkAnchorInfo(drilldown, scopedVars);\r\n\r\n                return '<a class=\"panel-menu-link\" style=\"color:#33B5E5;\" target=\"' + link.target + '\" href=\"' + link.href + '\">' + link.title + '</a>';\r\n\r\n            }\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n    render_values() {\r\n        let rows = [];\r\n\r\n        for (var y = 0; y < this.table.rows.length; y++) {\r\n            let row = this.table.rows[y];\r\n            let new_row = [];\r\n            for (var i = 0; i < this.table.columns.length; i++) {\r\n                new_row.push(this.formatColumnValue(i, row[i]));\r\n            }\r\n            rows.push(new_row);\r\n        }\r\n        return {\r\n            columns: this.table.columns,\r\n            rows: rows,\r\n        };\r\n    }\r\n}\r\n"]}