{"version":3,"sources":["../src/transformers.js"],"names":["getColumnInterchange","panel","interchange","split","getGroupByColumns","groupBys","groupBy","m","length","push","text","getTotalColumns","total","getHiddenValues","hiddenValues","shouldHidden","name","value","indexOf","transformDataToTable","data","model","TableModel","transformer","transformers","transform","message","map","totals","i","series","y","datapoints","dp","key","n","row","$","isNumeric","x","name1","name2","newRow","_total","z","_","moment","flatten","TimeSeries","timeseries_to_rows","description","getColumns","columns","type","rows","target","timeseries_to_columns","points","timeKey","toString","time","point","values","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","json","names","maxDocs","Math","doc","flattened","propName","isObject","JSON","stringify"],"mappings":";;;;;;;AA+NA,aAASA,oBAAT,CAA8BC,KAA9B,EAAqC;AACjC,YAAIA,MAAMC,WAAV,EAAuB;AACnB,mBAAOD,MAAMC,WAAN,CAAkBC,KAAlB,CAAwB,GAAxB,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ;;AAED,aAASC,iBAAT,CAA2BH,KAA3B,EAAkC;AAC9B,YAAII,WAAW,EAAf;AACA,YAAIJ,MAAMK,OAAV,EAAmB;AACf,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,MAAMK,OAAN,CAAcE,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3CF,yBAASI,IAAT,CAAcR,MAAMK,OAAN,CAAcC,CAAd,EAAiBG,IAA/B;AACH;AACJ;AACD,eAAOL,QAAP;AACH;;AAED,aAASM,eAAT,CAAyBV,KAAzB,EAAgC;AAC5B,YAAIA,MAAMW,KAAV,EAAiB;AACb,mBAAOX,MAAMW,KAAN,CAAYT,KAAZ,CAAkB,GAAlB,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ;;AAED,aAASU,eAAT,CAAyBZ,KAAzB,EAAgC;AAC5B,YAAIA,MAAMa,YAAV,EAAwB;AACpB,mBAAOb,MAAMa,YAAN,CAAmBX,KAAnB,CAAyB,GAAzB,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,EAAP;AACH;AACJ;;AAED,aAASY,YAAT,CAAsBD,YAAtB,EAAoCE,IAApC,EAA0CC,KAA1C,EAAiD;AAC7C,eAAOH,aAAaI,OAAb,CAAqBF,OAAO,GAAP,GAAaC,KAAlC,KAA4C,CAAnD;AACH;;AAED,aAASE,oBAAT,CAA8BC,IAA9B,EAAoCnB,KAApC,EAA2C;AACvC,YAAIoB,QAAQ,IAAIC,UAAJ,EAAZ;;AAEA,YAAI,CAACF,IAAD,IAASA,KAAKZ,MAAL,KAAgB,CAA7B,EAAgC;AAC5B,mBAAOa,KAAP;AACH;;AAED,YAAIE,cAAcC,aAAavB,MAAMwB,SAAnB,CAAlB;AACA,YAAI,CAACF,WAAL,EAAkB;AACd,kBAAM,EAACG,SAAS,iBAAiBzB,MAAMsB,WAAvB,GAAqC,YAA/C,EAAN;AACH;;AAED;AACA,YAAItB,MAAMK,OAAN,IAAiBL,MAAMK,OAAN,CAAcE,MAAd,GAAuB,CAA5C,EAA+C;AAC3C,gBAAImB,MAAM,EAAV;AACA,gBAAIzB,cAAcF,qBAAqBC,KAArB,CAAlB;AACA,gBAAII,WAAWD,kBAAkBH,KAAlB,CAAf;AACA,gBAAI2B,SAASjB,gBAAgBV,KAAhB,CAAb;AACA,gBAAIa,eAAeD,gBAAgBZ,KAAhB,CAAnB;;AAEA,iBAAK,IAAI4B,IAAI,CAAb,EAAgBA,IAAIT,KAAKZ,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,oBAAIC,SAASV,KAAKS,CAAL,CAAb;AACA,qBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,OAAOE,UAAP,CAAkBxB,MAAtC,EAA8CuB,GAA9C,EAAmD;AAC/C,wBAAIE,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAT;;AAEA,wBAAIG,MAAM,EAAV;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI9B,SAASG,MAA7B,EAAqC2B,GAArC,EAA0C;AACtCD,+BAAOD,GAAG5B,SAAS8B,CAAT,CAAH,IAAkB,GAAzB;AACH;;AAED,wBAAIC,MAAMT,IAAIO,GAAJ,CAAV;AACA,wBAAIE,GAAJ,EAAS;AACL;AACA,6BAAK,IAAIpB,IAAT,IAAiBiB,EAAjB,EAAqB;AACjB,gCAAI5B,SAASa,OAAT,CAAiBF,IAAjB,IAAyB,CAA7B,EAAgC;AAC5B,oCAAId,YAAYM,MAAZ,IAAsB,CAAtB,IAA2BN,YAAY,CAAZ,MAAmBc,IAAlD,EAAwD;AACpD,wCAAI,CAACD,aAAaD,YAAb,EAA2BmB,GAAGjB,IAAH,CAA3B,EAAqCiB,GAAG/B,YAAY,CAAZ,CAAH,CAArC,CAAL,EAA+D;AAC3D,4CAAImC,EAAEC,SAAF,CAAYF,IAAIH,GAAGjB,IAAH,CAAJ,CAAZ,CAAJ,EAAgC;AAC5BoB,gDAAIH,GAAGjB,IAAH,CAAJ,IAAgBoB,IAAIH,GAAGjB,IAAH,CAAJ,IAAgBiB,GAAG/B,YAAY,CAAZ,CAAH,CAAhC;AACH,yCAFD,MAEO;AACH,gDAAGkC,IAAIH,GAAGjB,IAAH,CAAJ,CAAH,EAAiB;AACboB,oDAAIH,GAAGjB,IAAH,CAAJ,IAAgBoB,IAAIH,GAAGjB,IAAH,CAAJ,IAAgB,IAAhB,GAAuBiB,GAAG/B,YAAY,CAAZ,CAAH,CAAvC;AACH,6CAFD,MAEK;AACDkC,oDAAIH,GAAGjB,IAAH,CAAJ,IAAgBiB,GAAG/B,YAAY,CAAZ,CAAH,CAAhB;AACH;AAEJ;AACJ;AACJ,iCAbD,MAaO,IAAIA,YAAYM,MAAZ,IAAsB,CAAtB,IAA2BN,YAAY,CAAZ,KAAkBc,IAAjD,EAAuD;AAC1D,wCAAI,CAACD,aAAaD,YAAb,EAA2BE,IAA3B,EAAiCiB,GAAGjB,IAAH,CAAjC,CAAL,EAAiD;AAC7C,4CAAIqB,EAAEC,SAAF,CAAYF,IAAIH,GAAGjB,IAAH,CAAJ,CAAZ,CAAJ,EAAgC;AAC5BoB,gDAAIpB,IAAJ,IAAYoB,IAAIpB,IAAJ,IAAYiB,GAAGjB,IAAH,CAAxB;AACH,yCAFD,MAEO;AACH,gDAAGoB,IAAIpB,IAAJ,CAAH,EAAa;AACToB,oDAAIpB,IAAJ,IAAYoB,IAAIpB,IAAJ,IAAY,IAAZ,GAAmBiB,GAAGjB,IAAH,CAA/B;AACH,6CAFD,MAEK;AACDoB,oDAAIpB,IAAJ,IAAWiB,GAAGjB,IAAH,CAAX;AACH;AAEJ;AACJ;AACJ;AACJ;AACJ;AACJ,qBAjCD,MAiCO;AACH;AACAoB,8BAAM,EAAN;AACA,6BAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIX,OAAOpB,MAA3B,EAAmC+B,GAAnC,EAAwC;AACpCH,gCAAIR,OAAOW,CAAP,CAAJ,IAAiB,CAAjB;AACH;AACDZ,4BAAIO,GAAJ,IAAWE,GAAX;AACA,6BAAK,IAAII,KAAT,IAAkBP,EAAlB,EAAsB;AAClB,gCAAI5B,SAASa,OAAT,CAAiBsB,KAAjB,IAA0B,CAAC,CAA/B,EAAkC;AAC9BJ,oCAAII,KAAJ,IAAaP,GAAGO,KAAH,CAAb;AACH,6BAFD,MAEO,IAAItC,YAAYM,MAAZ,IAAsB,CAAtB,IAA2BN,YAAY,CAAZ,MAAmBsC,KAAlD,EAAyD;AAC5D,oCAAI,CAACzB,aAAaD,YAAb,EAA2BmB,GAAGO,KAAH,CAA3B,EAAsCP,GAAG/B,YAAY,CAAZ,CAAH,CAAtC,CAAL,EAAgE;AAC5DkC,wCAAIH,GAAGO,KAAH,CAAJ,IAAiBP,GAAG/B,YAAY,CAAZ,CAAH,CAAjB;AACH;AACJ,6BAJM,MAIA,IAAIA,YAAYM,MAAZ,IAAsB,CAAtB,IAA2BN,YAAY,CAAZ,KAAkBsC,KAAjD,EAAwD;AAC3D,oCAAI,CAACzB,aAAaD,YAAb,EAA2B0B,KAA3B,EAAkCP,GAAGO,KAAH,CAAlC,CAAL,EAAmD;AAC/CJ,wCAAII,KAAJ,IAAaP,GAAGO,KAAH,CAAb;AACH;AACJ;AACJ;AACJ;AACJ;AACDV,uBAAOE,UAAP,GAAoB,EAApB;AACA,qBAAK,IAAIS,KAAT,IAAkBd,GAAlB,EAAuB;AACnB,wBAAIe,SAASf,IAAIc,KAAJ,CAAb;AACAC,2BAAOC,MAAP,GAAgB,CAAhB;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIhB,OAAOpB,MAA3B,EAAmCoC,GAAnC,EAAwC;AACpCF,+BAAOC,MAAP,IAAiBD,OAAOd,OAAOgB,CAAP,CAAP,CAAjB;AACH;AACDd,2BAAOE,UAAP,CAAkBvB,IAAlB,CAAuBiC,MAAvB;AACH;AACJ;AAGJ;;AAEDnB,oBAAYE,SAAZ,CAAsBL,IAAtB,EAA4BnB,KAA5B,EAAmCoB,KAAnC;AACA,eAAOA,KAAP;AACH;;;;AA3WMwB,a;;AACAC,kB;;AACAC,mB;;AACAC,sB;;AACA1B,sB;;;oCAEHE,Y,GAAe,E;;AAEnBA,yBAAayB,kBAAb,GAAkC;AAC9BC,6BAAa,qBADiB;AAE9BC,4BAAY,sBAAY;AACpB,2BAAO,EAAP;AACH,iBAJ6B;AAK9B1B,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrCA,0BAAM+B,OAAN,GAAgB,CACZ,EAAC1C,MAAM,MAAP,EAAe2C,MAAM,MAArB,EADY,EAEZ,EAAC3C,MAAM,QAAP,EAFY,EAGZ,EAACA,MAAM,OAAP,EAHY,CAAhB;;AAMA,yBAAK,IAAImB,IAAI,CAAb,EAAgBA,IAAIT,KAAKZ,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,4BAAIC,SAASV,KAAKS,CAAL,CAAb;AACA,6BAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,OAAOE,UAAP,CAAkBxB,MAAtC,EAA8CuB,GAA9C,EAAmD;AAC/C,gCAAIE,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAT;AACAV,kCAAMiC,IAAN,CAAW7C,IAAX,CAAgB,CAACwB,GAAG,CAAH,CAAD,EAAQH,OAAOyB,MAAf,EAAuBtB,GAAG,CAAH,CAAvB,CAAhB;AACH;AACJ;AACJ;AAnB6B,aAAlC;;AAsBAT,yBAAagC,qBAAb,GAAqC;AACjCN,6BAAa,wBADoB;AAEjCC,4BAAY,sBAAY;AACpB,2BAAO,EAAP;AACH,iBAJgC;AAKjC1B,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrCA,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,MAAP,EAAe2C,MAAM,MAArB,EAAnB;;AAEA;AACA,wBAAII,SAAS,EAAb;;AAEA,yBAAK,IAAI5B,IAAI,CAAb,EAAgBA,IAAIT,KAAKZ,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,4BAAIC,SAASV,KAAKS,CAAL,CAAb;AACAR,8BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAMoB,OAAOyB,MAAd,EAAnB;;AAEA,6BAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAID,OAAOE,UAAP,CAAkBxB,MAAtC,EAA8CuB,GAA9C,EAAmD;AAC/C,gCAAIE,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAT;AACA,gCAAI2B,UAAUzB,GAAG,CAAH,EAAM0B,QAAN,EAAd;;AAEA,gCAAI,CAACF,OAAOC,OAAP,CAAL,EAAsB;AAClBD,uCAAOC,OAAP,IAAkB,EAACE,MAAM3B,GAAG,CAAH,CAAP,EAAlB;AACAwB,uCAAOC,OAAP,EAAgB7B,CAAhB,IAAqBI,GAAG,CAAH,CAArB;AACH,6BAHD,MAGO;AACHwB,uCAAOC,OAAP,EAAgB7B,CAAhB,IAAqBI,GAAG,CAAH,CAArB;AACH;AACJ;AACJ;;AAED,yBAAK,IAAI2B,IAAT,IAAiBH,MAAjB,EAAyB;AACrB,4BAAII,QAAQJ,OAAOG,IAAP,CAAZ;AACA,4BAAIE,SAAS,CAACD,MAAMD,IAAP,CAAb;;AAEA,6BAAK,IAAI/B,KAAI,CAAb,EAAgBA,KAAIT,KAAKZ,MAAzB,EAAiCqB,IAAjC,EAAsC;AAClC,gCAAIZ,QAAQ4C,MAAMhC,EAAN,CAAZ;AACAiC,mCAAOrD,IAAP,CAAYQ,KAAZ;AACH;;AAEDI,8BAAMiC,IAAN,CAAW7C,IAAX,CAAgBqD,MAAhB;AACH;AACJ;AAvCgC,aAArC;;AA0CAtC,yBAAauC,uBAAb,GAAuC;AACnCb,6BAAa,0BADsB;AAEnCC,4BAAY,sBAAY;AACpB,2BAAO,CACH,EAACzC,MAAM,KAAP,EAAcO,OAAO,KAArB,EADG,EAEH,EAACP,MAAM,KAAP,EAAcO,OAAO,KAArB,EAFG,EAGH,EAACP,MAAM,KAAP,EAAcO,OAAO,KAArB,EAHG,EAIH,EAACP,MAAM,OAAP,EAAgBO,OAAO,OAAvB,EAJG,EAKH,EAACP,MAAM,SAAP,EAAkBO,OAAO,SAAzB,EALG,EAMH,EAACP,MAAM,OAAP,EAAgBO,OAAO,OAAvB,EANG,CAAP;AAQH,iBAXkC;AAYnCQ,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrC,wBAAIQ,CAAJ,EAAOE,CAAP;AACAV,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,QAAP,EAAnB;;AAEA,wBAAIT,MAAMmD,OAAN,CAAc5C,MAAd,KAAyB,CAA7B,EAAgC;AAC5BP,8BAAMmD,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,KAAP,EAAcO,OAAO,KAArB,EAAnB;AACH;;AAED,yBAAKY,IAAI,CAAT,EAAYA,IAAI5B,MAAMmD,OAAN,CAAc5C,MAA9B,EAAsCqB,GAAtC,EAA2C;AACvCR,8BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAMT,MAAMmD,OAAN,CAAcvB,CAAd,EAAiBnB,IAAxB,EAAnB;AACH;;AAED,yBAAKmB,IAAI,CAAT,EAAYA,IAAIT,KAAKZ,MAArB,EAA6BqB,GAA7B,EAAkC;AAC9B,4BAAIC,SAAS,IAAIkB,UAAJ,CAAe;AACxBhB,wCAAYZ,KAAKS,CAAL,EAAQG,UADI;AAExBgC,mCAAO5C,KAAKS,CAAL,EAAQ0B;AAFS,yBAAf,CAAb;;AAKAzB,+BAAOmC,YAAP,CAAoB,WAApB;AACA,4BAAIC,QAAQ,CAACpC,OAAOkC,KAAR,CAAZ;;AAEA,6BAAKjC,IAAI,CAAT,EAAYA,IAAI9B,MAAMmD,OAAN,CAAc5C,MAA9B,EAAsCuB,GAAtC,EAA2C;AACvCmC,kCAAMzD,IAAN,CAAWqB,OAAOqC,KAAP,CAAalE,MAAMmD,OAAN,CAAcrB,CAAd,EAAiBd,KAA9B,CAAX;AACH;;AAEDI,8BAAMiC,IAAN,CAAW7C,IAAX,CAAgByD,KAAhB;AACH;AACJ;AAvCkC,aAAvC;;AA0CA1C,yBAAa4C,WAAb,GAA2B;AACvBlB,6BAAa,aADU;AAEvBC,4BAAY,sBAAY;AACpB,2BAAO,EAAP;AACH,iBAJsB;AAKvB1B,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrCA,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,MAAP,EAAe2C,MAAM,MAArB,EAAnB;AACAhC,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,OAAP,EAAnB;AACAW,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,MAAP,EAAnB;AACAW,0BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,MAAP,EAAnB;;AAEA,wBAAI,CAACU,IAAD,IAASA,KAAKZ,MAAL,KAAgB,CAA7B,EAAgC;AAC5B;AACH;;AAED,yBAAK,IAAIqB,IAAI,CAAb,EAAgBA,IAAIT,KAAKZ,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,4BAAIwC,MAAMjD,KAAKS,CAAL,CAAV;AACAR,8BAAMiC,IAAN,CAAW7C,IAAX,CAAgB,CAAC4D,IAAIC,GAAL,EAAUD,IAAIE,KAAd,EAAqBF,IAAI3D,IAAzB,EAA+B2D,IAAIG,IAAnC,CAAhB;AACH;AACJ;AAnBsB,aAA3B;;AAsBAhD,yBAAaiD,KAAb,GAAqB;AACjBvB,6BAAa,OADI;AAEjBC,4BAAY,oBAAU/B,IAAV,EAAgB;AACxB,wBAAI,CAACA,IAAD,IAASA,KAAKZ,MAAL,KAAgB,CAA7B,EAAgC;AAC5B,+BAAO,EAAP;AACH;AACJ,iBANgB;AAOjBiB,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrC,wBAAI,CAACD,IAAD,IAASA,KAAKZ,MAAL,KAAgB,CAA7B,EAAgC;AAC5B;AACH;;AAED,wBAAIY,KAAK,CAAL,MAAYsD,SAAhB,EAA2B;AACvB,8BAAM,EAAChD,SAAS,mEAAV,EAAN;AACH;AACD,wBAAIN,KAAK,CAAL,EAAQiC,IAAR,KAAiBqB,SAArB,EAAgC;AAC5B,8BAAM,EAAChD,SAAS,mEAAV,EAAN;AACH;AACD,wBAAIN,KAAK,CAAL,EAAQiC,IAAR,KAAiB,OAArB,EAA8B;AAC1B,8BAAM,EAAC3B,SAAS,mEAAV,EAAN;AACH;AACDL,0BAAM+B,OAAN,GAAgBhC,KAAK,CAAL,EAAQgC,OAAxB;AACA/B,0BAAMiC,IAAN,GAAalC,KAAK,CAAL,EAAQkC,IAArB;AACH;AAvBgB,aAArB;;AA0BA9B,yBAAamD,IAAb,GAAoB;AAChBzB,6BAAa,WADG;AAEhBC,4BAAY,oBAAU/B,IAAV,EAAgB;AACxB,wBAAI,CAACA,IAAD,IAASA,KAAKZ,MAAL,KAAgB,CAA7B,EAAgC;AAC5B,+BAAO,EAAP;AACH;;AAED,wBAAIoE,QAAQ,EAAZ;AACA,yBAAK,IAAI/C,IAAI,CAAb,EAAgBA,IAAIT,KAAKZ,MAAzB,EAAiCqB,GAAjC,EAAsC;AAClC,4BAAIC,SAASV,KAAKS,CAAL,CAAb;AACA,4BAAIC,OAAOuB,IAAP,KAAgB,MAApB,EAA4B;AACxB;AACH;;AAED;AACA,4BAAIwB,UAAUC,KAAKR,GAAL,CAASxC,OAAOE,UAAP,CAAkBxB,MAA3B,EAAmC,GAAnC,CAAd;AACA,6BAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAI8C,OAApB,EAA6B9C,GAA7B,EAAkC;AAC9B,gCAAIgD,MAAMjD,OAAOE,UAAP,CAAkBD,CAAlB,CAAV;AACA,gCAAIiD,YAAYjC,QAAQgC,GAAR,EAAa,IAAb,CAAhB;AACA,iCAAK,IAAIE,QAAT,IAAqBD,SAArB,EAAgC;AAC5BJ,sCAAMK,QAAN,IAAkB,IAAlB;AACH;AACJ;AACJ;;AAED,2BAAOpC,EAAElB,GAAF,CAAMiD,KAAN,EAAa,UAAU3D,KAAV,EAAiBiB,GAAjB,EAAsB;AACtC,+BAAO,EAACxB,MAAMwB,GAAP,EAAYjB,OAAOiB,GAAnB,EAAP;AACH,qBAFM,CAAP;AAGH,iBA5Be;AA6BhBT,2BAAW,mBAAUL,IAAV,EAAgBnB,KAAhB,EAAuBoB,KAAvB,EAA8B;AACrC,wBAAIQ,CAAJ,EAAOE,CAAP,EAAUa,CAAV;AACA,yBAAKf,IAAI,CAAT,EAAYA,IAAI5B,MAAMmD,OAAN,CAAc5C,MAA9B,EAAsCqB,GAAtC,EAA2C;AACvCR,8BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAMT,MAAMmD,OAAN,CAAcvB,CAAd,EAAiBnB,IAAxB,EAAnB;AACH;;AAED,wBAAIW,MAAM+B,OAAN,CAAc5C,MAAd,KAAyB,CAA7B,EAAgC;AAC5Ba,8BAAM+B,OAAN,CAAc3C,IAAd,CAAmB,EAACC,MAAM,MAAP,EAAnB;AACH;;AAED,yBAAKmB,IAAI,CAAT,EAAYA,IAAIT,KAAKZ,MAArB,EAA6BqB,GAA7B,EAAkC;AAC9B,4BAAIC,SAASV,KAAKS,CAAL,CAAb;;AAEA,6BAAKE,IAAI,CAAT,EAAYA,IAAID,OAAOE,UAAP,CAAkBxB,MAAlC,EAA0CuB,GAA1C,EAA+C;AAC3C,gCAAIE,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAT;AACA,gCAAI+B,SAAS,EAAb;;AAEA,gCAAIjB,EAAEqC,QAAF,CAAWjD,EAAX,KAAkBhC,MAAMmD,OAAN,CAAc5C,MAAd,GAAuB,CAA7C,EAAgD;AAC5C,oCAAIwE,YAAYjC,QAAQd,EAAR,EAAY,IAAZ,CAAhB;AACA,qCAAKW,IAAI,CAAT,EAAYA,IAAI3C,MAAMmD,OAAN,CAAc5C,MAA9B,EAAsCoC,GAAtC,EAA2C;AACvCkB,2CAAOrD,IAAP,CAAYuE,UAAU/E,MAAMmD,OAAN,CAAcR,CAAd,EAAiB3B,KAA3B,CAAZ;AACH;AACJ,6BALD,MAKO;AACH6C,uCAAOrD,IAAP,CAAY0E,KAAKC,SAAL,CAAenD,EAAf,CAAZ;AACH;;AAEDZ,kCAAMiC,IAAN,CAAW7C,IAAX,CAAgBqD,MAAhB;AACH;AACJ;AACJ;AA1De,aAApB;oCA2MQtC,Y;;4CAAcL,oB","file":"transformers.js","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport flatten from 'app/core/utils/flatten';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nvar transformers = {};\r\n\r\ntransformers.timeseries_to_rows = {\r\n    description: 'Time series to rows',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns = [\r\n            {text: 'Time', type: 'date'},\r\n            {text: 'Metric'},\r\n            {text: 'Value'},\r\n        ];\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                model.rows.push([dp[1], series.target, dp[0]]);\r\n            }\r\n        }\r\n    },\r\n};\r\n\r\ntransformers.timeseries_to_columns = {\r\n    description: 'Time series to columns',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n\r\n        // group by time\r\n        var points = {};\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            model.columns.push({text: series.target});\r\n\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var timeKey = dp[1].toString();\r\n\r\n                if (!points[timeKey]) {\r\n                    points[timeKey] = {time: dp[1]};\r\n                    points[timeKey][i] = dp[0];\r\n                } else {\r\n                    points[timeKey][i] = dp[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var time in points) {\r\n            var point = points[time];\r\n            var values = [point.time];\r\n\r\n            for (let i = 0; i < data.length; i++) {\r\n                var value = point[i];\r\n                values.push(value);\r\n            }\r\n\r\n            model.rows.push(values);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.timeseries_aggregations = {\r\n    description: 'Time series aggregations',\r\n    getColumns: function () {\r\n        return [\r\n            {text: 'Avg', value: 'avg'},\r\n            {text: 'Min', value: 'min'},\r\n            {text: 'Max', value: 'max'},\r\n            {text: 'Total', value: 'total'},\r\n            {text: 'Current', value: 'current'},\r\n            {text: 'Count', value: 'count'},\r\n        ];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y;\r\n        model.columns.push({text: 'Metric'});\r\n\r\n        if (panel.columns.length === 0) {\r\n            panel.columns.push({text: 'Avg', value: 'avg'});\r\n        }\r\n\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = new TimeSeries({\r\n                datapoints: data[i].datapoints,\r\n                alias: data[i].target,\r\n            });\r\n\r\n            series.getFlotPairs('connected');\r\n            var cells = [series.alias];\r\n\r\n            for (y = 0; y < panel.columns.length; y++) {\r\n                cells.push(series.stats[panel.columns[y].value]);\r\n            }\r\n\r\n            model.rows.push(cells);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.annotations = {\r\n    description: 'Annotations',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n        model.columns.push({text: 'Title'});\r\n        model.columns.push({text: 'Text'});\r\n        model.columns.push({text: 'Tags'});\r\n\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var evt = data[i];\r\n            model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.table = {\r\n    description: 'Table',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n    },\r\n    transform: function (data, panel, model) {\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (data[0] === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type !== 'table') {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        model.columns = data[0].columns;\r\n        model.rows = data[0].rows;\r\n    }\r\n};\r\n\r\ntransformers.json = {\r\n    description: 'JSON Data',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        var names = {};\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            if (series.type !== 'docs') {\r\n                continue;\r\n            }\r\n\r\n            // only look at 100 docs\r\n            var maxDocs = Math.min(series.datapoints.length, 100);\r\n            for (var y = 0; y < maxDocs; y++) {\r\n                var doc = series.datapoints[y];\r\n                var flattened = flatten(doc, null);\r\n                for (var propName in flattened) {\r\n                    names[propName] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return _.map(names, function (value, key) {\r\n            return {text: key, value: key};\r\n        });\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y, z;\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        if (model.columns.length === 0) {\r\n            model.columns.push({text: 'JSON'});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n\r\n            for (y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var values = [];\r\n\r\n                if (_.isObject(dp) && panel.columns.length > 0) {\r\n                    var flattened = flatten(dp, null);\r\n                    for (z = 0; z < panel.columns.length; z++) {\r\n                        values.push(flattened[panel.columns[z].value]);\r\n                    }\r\n                } else {\r\n                    values.push(JSON.stringify(dp));\r\n                }\r\n\r\n                model.rows.push(values);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfunction getColumnInterchange(panel) {\r\n    if (panel.interchange) {\r\n        return panel.interchange.split(\":\");\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction getGroupByColumns(panel) {\r\n    var groupBys = [];\r\n    if (panel.groupBy) {\r\n        for (var m = 0; m < panel.groupBy.length; m++) {\r\n            groupBys.push(panel.groupBy[m].text);\r\n        }\r\n    }\r\n    return groupBys;\r\n}\r\n\r\nfunction getTotalColumns(panel) {\r\n    if (panel.total) {\r\n        return panel.total.split(\";\");\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction getHiddenValues(panel) {\r\n    if (panel.hiddenValues) {\r\n        return panel.hiddenValues.split(\";\");\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction shouldHidden(hiddenValues, name, value) {\r\n    return hiddenValues.indexOf(name + \":\" + value) >= 0;\r\n}\r\n\r\nfunction transformDataToTable(data, panel) {\r\n    var model = new TableModel();\r\n\r\n    if (!data || data.length === 0) {\r\n        return model;\r\n    }\r\n\r\n    var transformer = transformers[panel.transform];\r\n    if (!transformer) {\r\n        throw {message: 'Transformer ' + panel.transformer + ' not found'};\r\n    }\r\n\r\n    //group by\r\n    if (panel.groupBy && panel.groupBy.length > 0) {\r\n        var map = {};\r\n        var interchange = getColumnInterchange(panel);\r\n        var groupBys = getGroupByColumns(panel);\r\n        var totals = getTotalColumns(panel);\r\n        var hiddenValues = getHiddenValues(panel);\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n\r\n                var key = \"\";\r\n                for (var n = 0; n < groupBys.length; n++) {\r\n                    key += dp[groupBys[n]] + \",\";\r\n                }\r\n\r\n                var row = map[key];\r\n                if (row) {\r\n                    //append to key\r\n                    for (var name in dp) {\r\n                        if (groupBys.indexOf(name) < 0) {\r\n                            if (interchange.length == 2 && interchange[0] === name) {\r\n                                if (!shouldHidden(hiddenValues, dp[name], dp[interchange[1]])) {\r\n                                    if ($.isNumeric(row[dp[name]])) {\r\n                                        row[dp[name]] = row[dp[name]] + dp[interchange[1]];\r\n                                    } else {\r\n                                        if(row[dp[name]]){\r\n                                            row[dp[name]] = row[dp[name]] + \", \" + dp[interchange[1]];\r\n                                        }else{\r\n                                            row[dp[name]] = dp[interchange[1]];\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            } else if (interchange.length == 2 && interchange[1] != name) {\r\n                                if (!shouldHidden(hiddenValues, name, dp[name])) {\r\n                                    if ($.isNumeric(row[dp[name]])) {\r\n                                        row[name] = row[name] + dp[name];\r\n                                    } else {\r\n                                        if(row[name]){\r\n                                            row[name] = row[name] + \", \" + dp[name];\r\n                                        }else{\r\n                                            row[name] =dp[name];\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    //first create key\r\n                    row = {};\r\n                    for (var x = 0; x < totals.length; x++) {\r\n                        row[totals[x]] = 0;\r\n                    }\r\n                    map[key] = row;\r\n                    for (var name1 in dp) {\r\n                        if (groupBys.indexOf(name1) > -1) {\r\n                            row[name1] = dp[name1];\r\n                        } else if (interchange.length == 2 && interchange[0] === name1) {\r\n                            if (!shouldHidden(hiddenValues, dp[name1], dp[interchange[1]])) {\r\n                                row[dp[name1]] = dp[interchange[1]];\r\n                            }\r\n                        } else if (interchange.length == 2 && interchange[1] != name1) {\r\n                            if (!shouldHidden(hiddenValues, name1, dp[name1])) {\r\n                                row[name1] = dp[name1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            series.datapoints = [];\r\n            for (var name2 in map) {\r\n                var newRow = map[name2];\r\n                newRow._total = 0;\r\n                for (var z = 0; z < totals.length; z++) {\r\n                    newRow._total += newRow[totals[z]];\r\n                }\r\n                series.datapoints.push(newRow);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    transformer.transform(data, panel, model);\r\n    return model;\r\n}\r\n\r\nexport {transformers, transformDataToTable};\r\n"]}