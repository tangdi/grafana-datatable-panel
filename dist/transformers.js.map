{"version":3,"sources":["../src/transformers.js"],"names":["getColumnInterchange","panel","interchange","array","split","length","names","values","getGroupByColumns","groupBys","groupBy","m","push","text","getTotalColumns","total","expressions","totalColumns","i","parameters","operators","columns","j","getHiddenValues","hiddenValues","shouldHidden","name","value","indexOf","transformDataToTable","data","model","TableModel","transformer","transformers","transform","message","groupby","getInterchangeColummnName","dp","columnsName","w","join","appendValues","oldValue","newValue","$","isNumeric","map","totals","series","y","datapoints","key","n","row","columnName","x","name1","name2","newRow","z","a","summay","_","moment","flatten","TimeSeries","timeseries_to_rows","description","getColumns","type","rows","target","timeseries_to_columns","points","timeKey","toString","time","point","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","json","maxDocs","Math","doc","flattened","propName","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport flatten from 'app/core/utils/flatten';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nvar transformers = {};\r\n\r\ntransformers.timeseries_to_rows = {\r\n    description: 'Time series to rows',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns = [\r\n            {text: 'Time', type: 'date'},\r\n            {text: 'Metric'},\r\n            {text: 'Value'},\r\n        ];\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                model.rows.push([dp[1], series.target, dp[0]]);\r\n            }\r\n        }\r\n    },\r\n};\r\n\r\ntransformers.timeseries_to_columns = {\r\n    description: 'Time series to columns',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n\r\n        // group by time\r\n        var points = {};\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            model.columns.push({text: series.target});\r\n\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var timeKey = dp[1].toString();\r\n\r\n                if (!points[timeKey]) {\r\n                    points[timeKey] = {time: dp[1]};\r\n                    points[timeKey][i] = dp[0];\r\n                } else {\r\n                    points[timeKey][i] = dp[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var time in points) {\r\n            var point = points[time];\r\n            var values = [point.time];\r\n\r\n            for (let i = 0; i < data.length; i++) {\r\n                var value = point[i];\r\n                values.push(value);\r\n            }\r\n\r\n            model.rows.push(values);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.timeseries_aggregations = {\r\n    description: 'Time series aggregations',\r\n    getColumns: function () {\r\n        return [\r\n            {text: 'Avg', value: 'avg'},\r\n            {text: 'Min', value: 'min'},\r\n            {text: 'Max', value: 'max'},\r\n            {text: 'Total', value: 'total'},\r\n            {text: 'Current', value: 'current'},\r\n            {text: 'Count', value: 'count'},\r\n        ];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y;\r\n        model.columns.push({text: 'Metric'});\r\n\r\n        if (panel.columns.length === 0) {\r\n            panel.columns.push({text: 'Avg', value: 'avg'});\r\n        }\r\n\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = new TimeSeries({\r\n                datapoints: data[i].datapoints,\r\n                alias: data[i].target,\r\n            });\r\n\r\n            series.getFlotPairs('connected');\r\n            var cells = [series.alias];\r\n\r\n            for (y = 0; y < panel.columns.length; y++) {\r\n                cells.push(series.stats[panel.columns[y].value]);\r\n            }\r\n\r\n            model.rows.push(cells);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.annotations = {\r\n    description: 'Annotations',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n        model.columns.push({text: 'Title'});\r\n        model.columns.push({text: 'Text'});\r\n        model.columns.push({text: 'Tags'});\r\n\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var evt = data[i];\r\n            model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.table = {\r\n    description: 'Table',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n    },\r\n    transform: function (data, panel, model) {\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (data[0] === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type !== 'table') {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        model.columns = data[0].columns;\r\n        model.rows = data[0].rows;\r\n    }\r\n};\r\n\r\ntransformers.json = {\r\n    description: 'JSON Data',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        var names = {};\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            if (series.type !== 'docs') {\r\n                continue;\r\n            }\r\n\r\n            // only look at 100 docs\r\n            var maxDocs = Math.min(series.datapoints.length, 100);\r\n            for (var y = 0; y < maxDocs; y++) {\r\n                var doc = series.datapoints[y];\r\n                var flattened = flatten(doc, null);\r\n                for (var propName in flattened) {\r\n                    names[propName] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return _.map(names, function (value, key) {\r\n            return {text: key, value: key};\r\n        });\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y, z;\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        if (model.columns.length === 0) {\r\n            model.columns.push({text: 'JSON'});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n\r\n            for (y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var values = [];\r\n\r\n                if (_.isObject(dp) && panel.columns.length > 0) {\r\n                    var flattened = flatten(dp, null);\r\n                    for (z = 0; z < panel.columns.length; z++) {\r\n                        values.push(flattened[panel.columns[z].value]);\r\n                    }\r\n                } else {\r\n                    values.push(JSON.stringify(dp));\r\n                }\r\n\r\n                model.rows.push(values);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfunction getColumnInterchange(panel) {\r\n    if (panel.interchange) {\r\n        var array = panel.interchange.split(\":\");\r\n        if (array.length != 2) {\r\n            return null;\r\n        }\r\n        return {\r\n            names: array[0].split(\",\"),\r\n            values: array[1].split(\",\")\r\n        };\r\n\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getGroupByColumns(panel) {\r\n    var groupBys = [];\r\n    if (panel.groupBy) {\r\n        for (var m = 0; m < panel.groupBy.length; m++) {\r\n            groupBys.push(panel.groupBy[m].text);\r\n        }\r\n    }\r\n    return groupBys;\r\n}\r\n\r\nfunction getTotalColumns(panel) {\r\n    if (panel.total) {\r\n        var expressions = panel.total.split(\";\");\r\n        if (expressions.length < 1) {\r\n            return null;\r\n        }\r\n\r\n        var totalColumns = {\r\n            \"columns\": [],\r\n            \"expressions\": []\r\n        };\r\n\r\n        for (var i = 0; i < expressions.length; i++) {\r\n            var parameters = expressions[i].split(\"=\");\r\n            if (parameters.length != 2) {\r\n                continue;\r\n            }\r\n\r\n            var operators = parameters[1].split(\"+\");\r\n            if (operators.length > 1) {\r\n                totalColumns.columns.push(parameters[0]);\r\n                for (var j = 0; j < operators.length; j++) {\r\n                    totalColumns.columns.push(operators[j]);\r\n                }\r\n\r\n                totalColumns.expressions.push({\r\n                    \"summay\": parameters[0],\r\n                    \"operators\": operators\r\n                });\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return totalColumns;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getHiddenValues(panel) {\r\n    if (panel.hiddenValues) {\r\n        return panel.hiddenValues.split(\";\");\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction shouldHidden(hiddenValues, name, value) {\r\n    return hiddenValues.indexOf(name + \":\" + value) >= 0;\r\n}\r\n\r\nfunction transformDataToTable(data, panel) {\r\n    var model = new TableModel();\r\n\r\n    if (!data || data.length === 0) {\r\n        return model;\r\n    }\r\n\r\n    var transformer = transformers[panel.transform];\r\n    if (!transformer) {\r\n        throw {message: 'Transformer ' + panel.transformer + ' not found'};\r\n    }\r\n\r\n    //group by\r\n    groupby(data, panel);\r\n\r\n    transformer.transform(data, panel, model);\r\n    return model;\r\n}\r\n\r\nfunction getInterchangeColummnName(interchange, dp) {\r\n    var columnsName = [];\r\n    for (var w = 0; w < interchange.names.length; w++) {\r\n        columnsName.push(dp[interchange.names[w]]);\r\n    }\r\n    return columnsName.join(\"_\");\r\n}\r\n\r\nfunction appendValues(oldValue, newValue) {\r\n    if (!oldValue) {\r\n        return newValue;\r\n    }\r\n    if ($.isNumeric(oldValue)) {\r\n        return oldValue + newValue;\r\n    } else {\r\n        if (oldValue.indexOf(newValue + \",\") < 0 && oldValue.indexOf(\",\" + newValue)) {\r\n            return oldValue + \", \" + newValue;\r\n        } else {\r\n            return oldValue;\r\n        }\r\n    }\r\n}\r\n\r\nfunction groupby(data, panel) {\r\n    if (panel.groupBy && panel.groupBy.length > 0) {\r\n        var map = {};\r\n        var interchange = getColumnInterchange(panel);\r\n        var groupBys = getGroupByColumns(panel);\r\n        var totals = getTotalColumns(panel);\r\n        var hiddenValues = getHiddenValues(panel);\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n\r\n                var key = \"\";\r\n                for (var n = 0; n < groupBys.length; n++) {\r\n                    key += dp[groupBys[n]] + \",\";\r\n                }\r\n\r\n                var row = map[key];\r\n                if (row) {\r\n                    //append to key\r\n                    for (var name in dp) {\r\n                        if (groupBys.indexOf(name) < 0) {\r\n                            //need interchange row and column\r\n                            if (interchange != null && interchange.values.indexOf(name) >= 0) {\r\n                                if (!shouldHidden(hiddenValues, name, dp[name])) {\r\n                                    var columnName = getInterchangeColummnName(interchange, dp);\r\n                                    row[columnName] = appendValues(row[columnName], dp[name]);\r\n                                }\r\n                            } else if (interchange == null || (interchange != null && interchange.names.indexOf(name) < 0)) {\r\n                                if (!shouldHidden(hiddenValues, name, dp[name])) {\r\n                                    row[name] = appendValues(row[name], dp[name]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    //first create key\r\n                    row = {};\r\n                    if (totals != null) {\r\n                        for (var x = 0; x < totals.columns.length; x++) {\r\n                            row[totals.columns[x]] = 0;\r\n                        }\r\n                    }\r\n\r\n                    map[key] = row;\r\n                    for (var name1 in dp) {\r\n                        if (groupBys.indexOf(name1) > -1) {\r\n                            row[name1] = dp[name1];\r\n                        } else if (interchange != null && interchange.values.indexOf(name1) >= 0) {\r\n                            if (!shouldHidden(hiddenValues, name1, dp[interchange[1]])) {\r\n                                row[getInterchangeColummnName(interchange, dp)] = dp[name1];\r\n                            }\r\n                        } else if (interchange == null || (interchange != null && interchange.names.indexOf(name1) < 0)) {\r\n                            if (!shouldHidden(hiddenValues, name1, dp[name1])) {\r\n                                row[name1] = dp[name1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            series.datapoints = [];\r\n            for (var name2 in map) {\r\n                var newRow = map[name2];\r\n                if (totals != null && totals.expressions != null) {\r\n                    for (var z = 0; z < totals.expressions.length; z++) {\r\n                        for (var a = 0; a < totals.expressions[z].operators.length; a++) {\r\n                            newRow[totals.expressions[z].summay] += newRow[totals.expressions[z].operators[a]];\r\n                        }\r\n                    }\r\n                }\r\n                series.datapoints.push(newRow);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport {transformers, transformDataToTable};\r\n"]}