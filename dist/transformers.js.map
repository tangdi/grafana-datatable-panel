{"version":3,"sources":["../src/transformers.js"],"names":["getColumnInterchange","panel","interchange","array","split","length","names","values","getGroupByColumns","groupBys","groupBy","m","push","text","getTotalColumns","total","expressions","totalColumns","i","parameters","operators","columns","j","getHiddenValues","hiddenValues","shouldHidden","name","value","indexOf","transformDataToTable","data","model","TableModel","transformer","transformers","transform","message","groupby","getInterchangeColummnName","dp","columnsName","w","join","map","totals","series","y","datapoints","key","n","row","columnName","$","isNumeric","x","name1","name2","newRow","z","a","summay","_","moment","flatten","TimeSeries","timeseries_to_rows","description","getColumns","type","rows","target","timeseries_to_columns","points","timeKey","toString","time","point","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","json","maxDocs","Math","doc","flattened","propName","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport flatten from 'app/core/utils/flatten';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nvar transformers = {};\r\n\r\ntransformers.timeseries_to_rows = {\r\n    description: 'Time series to rows',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns = [\r\n            {text: 'Time', type: 'date'},\r\n            {text: 'Metric'},\r\n            {text: 'Value'},\r\n        ];\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                model.rows.push([dp[1], series.target, dp[0]]);\r\n            }\r\n        }\r\n    },\r\n};\r\n\r\ntransformers.timeseries_to_columns = {\r\n    description: 'Time series to columns',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n\r\n        // group by time\r\n        var points = {};\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            model.columns.push({text: series.target});\r\n\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var timeKey = dp[1].toString();\r\n\r\n                if (!points[timeKey]) {\r\n                    points[timeKey] = {time: dp[1]};\r\n                    points[timeKey][i] = dp[0];\r\n                } else {\r\n                    points[timeKey][i] = dp[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var time in points) {\r\n            var point = points[time];\r\n            var values = [point.time];\r\n\r\n            for (let i = 0; i < data.length; i++) {\r\n                var value = point[i];\r\n                values.push(value);\r\n            }\r\n\r\n            model.rows.push(values);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.timeseries_aggregations = {\r\n    description: 'Time series aggregations',\r\n    getColumns: function () {\r\n        return [\r\n            {text: 'Avg', value: 'avg'},\r\n            {text: 'Min', value: 'min'},\r\n            {text: 'Max', value: 'max'},\r\n            {text: 'Total', value: 'total'},\r\n            {text: 'Current', value: 'current'},\r\n            {text: 'Count', value: 'count'},\r\n        ];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y;\r\n        model.columns.push({text: 'Metric'});\r\n\r\n        if (panel.columns.length === 0) {\r\n            panel.columns.push({text: 'Avg', value: 'avg'});\r\n        }\r\n\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = new TimeSeries({\r\n                datapoints: data[i].datapoints,\r\n                alias: data[i].target,\r\n            });\r\n\r\n            series.getFlotPairs('connected');\r\n            var cells = [series.alias];\r\n\r\n            for (y = 0; y < panel.columns.length; y++) {\r\n                cells.push(series.stats[panel.columns[y].value]);\r\n            }\r\n\r\n            model.rows.push(cells);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.annotations = {\r\n    description: 'Annotations',\r\n    getColumns: function () {\r\n        return [];\r\n    },\r\n    transform: function (data, panel, model) {\r\n        model.columns.push({text: 'Time', type: 'date'});\r\n        model.columns.push({text: 'Title'});\r\n        model.columns.push({text: 'Text'});\r\n        model.columns.push({text: 'Tags'});\r\n\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var evt = data[i];\r\n            model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\r\n        }\r\n    }\r\n};\r\n\r\ntransformers.table = {\r\n    description: 'Table',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n    },\r\n    transform: function (data, panel, model) {\r\n        if (!data || data.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (data[0] === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type === undefined) {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        if (data[0].type !== 'table') {\r\n            throw {message: 'Query result is not in table format, try using another transform.'};\r\n        }\r\n        model.columns = data[0].columns;\r\n        model.rows = data[0].rows;\r\n    }\r\n};\r\n\r\ntransformers.json = {\r\n    description: 'JSON Data',\r\n    getColumns: function (data) {\r\n        if (!data || data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        var names = {};\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            if (series.type !== 'docs') {\r\n                continue;\r\n            }\r\n\r\n            // only look at 100 docs\r\n            var maxDocs = Math.min(series.datapoints.length, 100);\r\n            for (var y = 0; y < maxDocs; y++) {\r\n                var doc = series.datapoints[y];\r\n                var flattened = flatten(doc, null);\r\n                for (var propName in flattened) {\r\n                    names[propName] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return _.map(names, function (value, key) {\r\n            return {text: key, value: key};\r\n        });\r\n    },\r\n    transform: function (data, panel, model) {\r\n        var i, y, z;\r\n        for (i = 0; i < panel.columns.length; i++) {\r\n            model.columns.push({text: panel.columns[i].text});\r\n        }\r\n\r\n        if (model.columns.length === 0) {\r\n            model.columns.push({text: 'JSON'});\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n\r\n            for (y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n                var values = [];\r\n\r\n                if (_.isObject(dp) && panel.columns.length > 0) {\r\n                    var flattened = flatten(dp, null);\r\n                    for (z = 0; z < panel.columns.length; z++) {\r\n                        values.push(flattened[panel.columns[z].value]);\r\n                    }\r\n                } else {\r\n                    values.push(JSON.stringify(dp));\r\n                }\r\n\r\n                model.rows.push(values);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfunction getColumnInterchange(panel) {\r\n    if (panel.interchange) {\r\n        var array = panel.interchange.split(\":\");\r\n        if(array.length!=2){\r\n            return null;\r\n        }\r\n        return {\r\n            names:array[0].split(\",\"),\r\n            values: array[1].split(\",\")\r\n        };\r\n\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getGroupByColumns(panel) {\r\n    var groupBys = [];\r\n    if (panel.groupBy) {\r\n        for (var m = 0; m < panel.groupBy.length; m++) {\r\n            groupBys.push(panel.groupBy[m].text);\r\n        }\r\n    }\r\n    return groupBys;\r\n}\r\n\r\nfunction getTotalColumns(panel) {\r\n    if (panel.total) {\r\n        var expressions =  panel.total.split(\";\");\r\n        if(expressions.length <1){\r\n            return null;\r\n        }\r\n\r\n        var totalColumns = {\r\n            \"columns\":[],\r\n            \"expressions\":[]\r\n        };\r\n\r\n        for(var i=0; i< expressions.length; i++){\r\n          var parameters =  expressions[i].split(\"=\");\r\n          if(parameters.length!=2){\r\n              continue;\r\n          }\r\n\r\n         var operators = parameters[1].split(\"+\");\r\n          if(operators.length>1){\r\n              totalColumns.columns.push(parameters[0]);\r\n              for(var j = 0; j < operators.length; j++){\r\n                  totalColumns.columns.push(operators[j]);\r\n              }\r\n\r\n              totalColumns.expressions.push({\r\n                  \"summay\":parameters[0],\r\n                  \"operators\": operators\r\n              });\r\n          }\r\n\r\n\r\n        }\r\n\r\n        return totalColumns;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getHiddenValues(panel) {\r\n    if (panel.hiddenValues) {\r\n        return panel.hiddenValues.split(\";\");\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction shouldHidden(hiddenValues, name, value) {\r\n    return hiddenValues.indexOf(name + \":\" + value) >= 0;\r\n}\r\n\r\nfunction transformDataToTable(data, panel) {\r\n    var model = new TableModel();\r\n\r\n    if (!data || data.length === 0) {\r\n        return model;\r\n    }\r\n\r\n    var transformer = transformers[panel.transform];\r\n    if (!transformer) {\r\n        throw {message: 'Transformer ' + panel.transformer + ' not found'};\r\n    }\r\n\r\n    //group by\r\n    groupby(data, panel);\r\n\r\n    transformer.transform(data, panel, model);\r\n    return model;\r\n}\r\n\r\nfunction getInterchangeColummnName(interchange,dp){\r\n    var columnsName = [];\r\n    for(var w = 0; w < interchange.names.length; w++){\r\n        columnsName.push(dp[interchange.names[w]]);\r\n    }\r\n   return columnsName.join(\"_\");\r\n}\r\n\r\nfunction groupby(data, panel) {\r\n    if (panel.groupBy && panel.groupBy.length > 0) {\r\n        var map = {};\r\n        var interchange = getColumnInterchange(panel);\r\n        var groupBys = getGroupByColumns(panel);\r\n        var totals = getTotalColumns(panel);\r\n        var hiddenValues = getHiddenValues(panel);\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            var series = data[i];\r\n            for (var y = 0; y < series.datapoints.length; y++) {\r\n                var dp = series.datapoints[y];\r\n\r\n                var key = \"\";\r\n                for (var n = 0; n < groupBys.length; n++) {\r\n                    key += dp[groupBys[n]] + \",\";\r\n                }\r\n\r\n                var row = map[key];\r\n                if (row) {\r\n                    //append to key\r\n                    for (var name in dp) {\r\n                        if (groupBys.indexOf(name) < 0) {\r\n                            if (interchange!=null && interchange.values.indexOf(name)>=0) {\r\n                                if (!shouldHidden(hiddenValues, name, dp[name])) {\r\n                                    var columnName = getInterchangeColummnName(interchange,dp);\r\n                                    if ($.isNumeric(row[columnName])) {\r\n                                        row[columnName] = row[columnName] + dp[name];\r\n                                    } else {\r\n                                        if (row[columnName]) {\r\n                                            row[columnName] = row[columnName] + \", \" + dp[name];\r\n                                        } else {\r\n                                            row[columnName] = dp[name];\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            } else if (interchange ==null || (interchange!=null && interchange.names.indexOf(name)<0)) {\r\n                                if (!shouldHidden(hiddenValues, name, dp[name])) {\r\n                                    if ($.isNumeric(row[dp[name]])) {\r\n                                        row[name] = row[name] + dp[name];\r\n                                    } else {\r\n                                        if (row[name]) {\r\n                                            row[name] = row[name] + \", \" + dp[name];\r\n                                        } else {\r\n                                            row[name] = dp[name];\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    //first create key\r\n                    row = {};\r\n                    if(totals!=null){\r\n                        for (var x = 0; x < totals.columns.length; x++) {\r\n                            row[totals.columns[x]] = 0;\r\n                        }\r\n                    }\r\n\r\n                    map[key] = row;\r\n                    for (var name1 in dp) {\r\n                        if (groupBys.indexOf(name1) > -1) {\r\n                            row[name1] = dp[name1];\r\n                        } else if (interchange != null && interchange.values.indexOf(name1)>=0 ) {\r\n                            if (!shouldHidden(hiddenValues, name1, dp[interchange[1]])) {\r\n                                row[getInterchangeColummnName(interchange,dp)] = dp[name1];\r\n                            }\r\n                        }else if(interchange ==null || (interchange!=null && interchange.names.indexOf(name1)<0)) {\r\n                            if (!shouldHidden(hiddenValues, name1, dp[name1])) {\r\n                                row[name1] = dp[name1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            series.datapoints = [];\r\n            for (var name2 in map) {\r\n                var newRow = map[name2];\r\n                if(totals!=null&&totals.expressions!=null){\r\n                    for (var z = 0; z < totals.expressions.length; z++) {\r\n                        for (var a = 0; a < totals.expressions[z].operators.length; a++) {\r\n                            newRow[totals.expressions[z].summay] += newRow[totals.expressions[z].operators[a]];\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                series.datapoints.push(newRow);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport {transformers, transformDataToTable};\r\n"]}