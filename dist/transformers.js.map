{"version":3,"sources":["../src/transformers.js"],"names":["getColumnInterchange","panel","interchange","array","split","length","names","values","getGroupByColumns","groupBys","groupBy","m","push","text","getCalculateColumns","expression","operator","expressions","totalColumns","i","parameters","operators","columns","j","getHiddenValues","hiddenValues","shouldHidden","name","value","indexOf","splitColumn","dataPoint","splitChar","columnName","columnValue","splitValues","z","transformDataToTable","data","model","TableModel","transformer","transformers","transform","message","groupby","getInterchangeColummnName","dp","columnsName","w","join","appendValues","oldValue","newValue","$","isNumeric","initRow","row","x","calculateRow","result","a","dataPointCallBack","totals","total","diffs","difference","rates","rate","series","map","y","datapoints","key","n","_","each","name2","newRow","moment","flatten","TimeSeries","timeseries_to_rows","description","getColumns","type","rows","target","timeseries_to_columns","points","timeKey","toString","time","point","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","min","title","tags","table","undefined","json","maxDocs","Math","doc","flattened","propName","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport flatten from 'app/core/utils/flatten';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\n\nvar transformers = {};\n\ntransformers.timeseries_to_rows = {\n    description: 'Time series to rows',\n    getColumns: function () {\n        return [];\n    },\n    transform: function (data, panel, model) {\n        model.columns = [\n            {text: 'Time', type: 'date'},\n            {text: 'Metric'},\n            {text: 'Value'},\n        ];\n\n        for (var i = 0; i < data.length; i++) {\n            var series = data[i];\n            for (var y = 0; y < series.datapoints.length; y++) {\n                var dp = series.datapoints[y];\n                model.rows.push([dp[1], series.target, dp[0]]);\n            }\n        }\n    },\n};\n\ntransformers.timeseries_to_columns = {\n    description: 'Time series to columns',\n    getColumns: function () {\n        return [];\n    },\n    transform: function (data, panel, model) {\n        model.columns.push({text: 'Time', type: 'date'});\n\n        // group by time\n        var points = {};\n\n        for (var i = 0; i < data.length; i++) {\n            var series = data[i];\n            model.columns.push({text: series.target});\n\n            for (var y = 0; y < series.datapoints.length; y++) {\n                var dp = series.datapoints[y];\n                var timeKey = dp[1].toString();\n\n                if (!points[timeKey]) {\n                    points[timeKey] = {time: dp[1]};\n                    points[timeKey][i] = dp[0];\n                } else {\n                    points[timeKey][i] = dp[0];\n                }\n            }\n        }\n\n        for (var time in points) {\n            var point = points[time];\n            var values = [point.time];\n\n            for (let i = 0; i < data.length; i++) {\n                var value = point[i];\n                values.push(value);\n            }\n\n            model.rows.push(values);\n        }\n    }\n};\n\ntransformers.timeseries_aggregations = {\n    description: 'Time series aggregations',\n    getColumns: function () {\n        return [\n            {text: 'Avg', value: 'avg'},\n            {text: 'Min', value: 'min'},\n            {text: 'Max', value: 'max'},\n            {text: 'Total', value: 'total'},\n            {text: 'Current', value: 'current'},\n            {text: 'Count', value: 'count'},\n        ];\n    },\n    transform: function (data, panel, model) {\n        var i, y;\n        model.columns.push({text: 'Metric'});\n\n        if (panel.columns.length === 0) {\n            panel.columns.push({text: 'Avg', value: 'avg'});\n        }\n\n        for (i = 0; i < panel.columns.length; i++) {\n            model.columns.push({text: panel.columns[i].text});\n        }\n\n        for (i = 0; i < data.length; i++) {\n            var series = new TimeSeries({\n                datapoints: data[i].datapoints,\n                alias: data[i].target,\n            });\n\n            series.getFlotPairs('connected');\n            var cells = [series.alias];\n\n            for (y = 0; y < panel.columns.length; y++) {\n                cells.push(series.stats[panel.columns[y].value]);\n            }\n\n            model.rows.push(cells);\n        }\n    }\n};\n\ntransformers.annotations = {\n    description: 'Annotations',\n    getColumns: function () {\n        return [];\n    },\n    transform: function (data, panel, model) {\n        model.columns.push({text: 'Time', type: 'date'});\n        model.columns.push({text: 'Title'});\n        model.columns.push({text: 'Text'});\n        model.columns.push({text: 'Tags'});\n\n        if (!data || data.length === 0) {\n            return;\n        }\n\n        for (var i = 0; i < data.length; i++) {\n            var evt = data[i];\n            model.rows.push([evt.min, evt.title, evt.text, evt.tags]);\n        }\n    }\n};\n\ntransformers.table = {\n    description: 'Table',\n    getColumns: function (data) {\n        if (!data || data.length === 0) {\n            return [];\n        }\n    },\n    transform: function (data, panel, model) {\n        if (!data || data.length === 0) {\n            return;\n        }\n\n        if (data[0] === undefined) {\n            throw {message: 'Query result is not in table format, try using another transform.'};\n        }\n        if (data[0].type === undefined) {\n            throw {message: 'Query result is not in table format, try using another transform.'};\n        }\n        if (data[0].type !== 'table') {\n            throw {message: 'Query result is not in table format, try using another transform.'};\n        }\n        model.columns = data[0].columns;\n        model.rows = data[0].rows;\n    }\n};\n\ntransformers.json = {\n    description: 'JSON Data',\n    getColumns: function (data) {\n        if (!data || data.length === 0) {\n            return [];\n        }\n\n        var names = {};\n        for (var i = 0; i < data.length; i++) {\n            var series = data[i];\n            if (series.type !== 'docs') {\n                continue;\n            }\n\n            // only look at 100 docs\n            var maxDocs = Math.min(series.datapoints.length, 100);\n            for (var y = 0; y < maxDocs; y++) {\n                var doc = series.datapoints[y];\n                var flattened = flatten(doc, null);\n                for (var propName in flattened) {\n                    names[propName] = true;\n                }\n            }\n        }\n\n        return _.map(names, function (value, key) {\n            return {text: key, value: key};\n        });\n    },\n    transform: function (data, panel, model) {\n        var i, y, z;\n        for (i = 0; i < panel.columns.length; i++) {\n            model.columns.push({text: panel.columns[i].text});\n        }\n\n        if (model.columns.length === 0) {\n            model.columns.push({text: 'JSON'});\n        }\n\n        for (i = 0; i < data.length; i++) {\n            var series = data[i];\n\n            for (y = 0; y < series.datapoints.length; y++) {\n                var dp = series.datapoints[y];\n                var values = [];\n\n                if (_.isObject(dp) && panel.columns.length > 0) {\n                    var flattened = flatten(dp, null);\n                    for (z = 0; z < panel.columns.length; z++) {\n                        values.push(flattened[panel.columns[z].value]);\n                    }\n                } else {\n                    values.push(JSON.stringify(dp));\n                }\n\n                model.rows.push(values);\n            }\n        }\n    }\n};\n\nfunction getColumnInterchange(panel) {\n    if (panel.interchange) {\n        var array = panel.interchange.split(\":\");\n        if (array.length != 2) {\n            return null;\n        }\n        return {\n            names: array[0].split(\",\"),\n            values: array[1].split(\",\")\n        };\n\n    } else {\n        return null;\n    }\n}\n\nfunction getGroupByColumns(panel) {\n    var groupBys = [];\n    if (panel.groupBy) {\n        for (var m = 0; m < panel.groupBy.length; m++) {\n            groupBys.push(panel.groupBy[m].text);\n        }\n    }\n    return groupBys;\n}\n\nfunction getCalculateColumns(expression, operator) {\n    if (expression) {\n        var expressions = expression.split(\";\");\n        if (expressions.length < 1) {\n            return null;\n        }\n\n        var totalColumns = {\n            \"columns\": [],\n            \"expressions\": []\n        };\n\n        for (var i = 0; i < expressions.length; i++) {\n            var parameters = expressions[i].split(\"=\");\n            if (parameters.length != 2) {\n                continue;\n            }\n\n            var operators = parameters[1].split(operator);\n            if (operators.length > 1) {\n                totalColumns.columns.push(parameters[0]);\n                for (var j = 0; j < operators.length; j++) {\n                    totalColumns.columns.push(operators[j]);\n                }\n\n                totalColumns.expressions.push({\n                    \"result\": parameters[0],\n                    \"operators\": operators\n                });\n            }\n        }\n        return totalColumns;\n    } else {\n        return null;\n    }\n}\n\nfunction getHiddenValues(panel) {\n    if (panel.hiddenValues) {\n        return panel.hiddenValues.split(\";\");\n    } else {\n        return [];\n    }\n}\n\nfunction shouldHidden(hiddenValues, name, value) {\n    return hiddenValues.indexOf(name + \":\" + value) >= 0;\n}\n\nfunction splitColumn(dataPoint, panel) {\n    if (panel.splitColumn && panel.splitColumn.length > 0 && panel.splitChar) {\n        for (var i = 0; i < panel.splitColumn.length; i++) {\n            var columnName = panel.splitColumn[i].value;\n            var columnValue = dataPoint[columnName];\n            if (columnValue) {\n                var splitValues = columnValue.split(panel.splitChar);\n                if (splitValues.length > 0) {\n                    for (var z = 0; z < splitValues.length; z++) {\n                        dataPoint[columnName + \"_\" + z] = splitValues[z];\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction transformDataToTable(data, panel) {\n    var model = new TableModel();\n\n    if (!data || data.length === 0) {\n        return model;\n    }\n\n    var transformer = transformers[panel.transform];\n    if (!transformer) {\n        throw {message: 'Transformer ' + panel.transformer + ' not found'};\n    }\n\n    //group by\n    groupby(data, panel, splitColumn);\n\n    transformer.transform(data, panel, model);\n    return model;\n}\n\nfunction getInterchangeColummnName(interchange, dp) {\n    var columnsName = [];\n    for (var w = 0; w < interchange.names.length; w++) {\n        columnsName.push(dp[interchange.names[w]]);\n    }\n    return columnsName.join(\"_\");\n}\n\nfunction appendValues(oldValue, newValue) {\n    if (!oldValue) {\n        return newValue;\n    }\n    if ($.isNumeric(newValue)) {\n        return oldValue + newValue;\n    } else {\n        if (oldValue.indexOf(newValue + \",\") < 0 && oldValue.indexOf(\",\" + newValue)) {\n            return oldValue + \", \" + newValue;\n        } else {\n            return oldValue;\n        }\n    }\n}\n\nfunction initRow(row, expressions) {\n    if (expressions != null) {\n        for (var x = 0; x < expressions.columns.length; x++) {\n            if (!row[expressions.columns[x]]) {\n                row[expressions.columns[x]] = 0;\n            }\n        }\n    }\n}\n\nfunction calculateRow(row, expressions, operator) {\n    if (expressions != null && expressions.expressions != null) {\n        for (var z = 0; z < expressions.expressions.length; z++) {\n            row[expressions.expressions[z].result] = row[expressions.expressions[z].operators[0]];\n            for (var a = 1; a < expressions.expressions[z].operators.length; a++) {\n                if (operator === \"+\") {\n                    if (row[expressions.expressions[z].operators[a]]) {\n                        if (row[expressions.expressions[z].result]) {\n                            row[expressions.expressions[z].result] += row[expressions.expressions[z].operators[a]];\n                        } else {\n                            row[expressions.expressions[z].result] = row[expressions.expressions[z].operators[a]];\n                        }\n\n                    }\n                } else if (operator === \"-\") {\n                    if (row[expressions.expressions[z].result] && row[expressions.expressions[z].operators[a]]) {\n                        row[expressions.expressions[z].result] -= row[expressions.expressions[z].operators[a]];\n                    }\n                } else if (operator === \"/\") {\n                    if (row[expressions.expressions[z].result] && row[expressions.expressions[z].operators[a]]) {\n                        if (row[expressions.expressions[z].operators[a]] === 0) {\n                            row[expressions.expressions[z].result] = 0;\n                        } else {\n                            row[expressions.expressions[z].result] /= row[expressions.expressions[z].operators[a]];\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction groupby(data, panel, dataPointCallBack) {\n    if (panel.groupBy && panel.groupBy.length > 0) {\n        var interchange = getColumnInterchange(panel);\n        var groupBys = getGroupByColumns(panel);\n        var totals = getCalculateColumns(panel.total, \"+\");\n        var diffs = getCalculateColumns(panel.difference, \"-\");\n        var rates = getCalculateColumns(panel.rate, \"/\");\n        var hiddenValues = getHiddenValues(panel);\n\n        for (var i = 0; i < data.length; i++) {\n            var series = data[i];\n            var map = {};\n            for (var y = 0; y < series.datapoints.length; y++) {\n                var dp = series.datapoints[y];\n\n                var key = \"\";\n                for (var n = 0; n < groupBys.length; n++) {\n                    key += dp[groupBys[n]] + \",\";\n                }\n\n                var row = map[key];\n                if (row) {\n                    //append to key\n                } else {\n                    //first create key\n                    row = {};\n                    map[key] = row;\n                    _.each(groupBys, function (key) {\n                        if (key in dp){\n                            row[key] = dp[key];\n                        }\n                    });\n                }\n                for (var name in dp) {\n                    if (groupBys.indexOf(name) < 0) {\n                        //need interchange row and column\n                        if (interchange != null && interchange.values.indexOf(name) >= 0) {\n                            if (!shouldHidden(hiddenValues, name, dp[name])) {\n                                var columnName = getInterchangeColummnName(interchange, dp);\n                                if(columnName in row){\n                                    row[columnName] = appendValues(row[columnName], dp[name]);\n                                }else{\n                                    row[columnName] = dp[name];\n                                }\n                            }\n                        } else if (interchange == null || interchange.names.indexOf(name) < 0) {\n                            if (!shouldHidden(hiddenValues, name, dp[name])) {\n                                if(name in row){\n                                    row[name] = appendValues(row[name], dp[name]);\n                                }else{\n                                    row[name] = dp[name];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            series.datapoints = [];\n            for (var name2 in map) {\n                var newRow = map[name2];\n                calculateRow(newRow, totals, \"+\");\n                calculateRow(newRow, rates, \"/\");\n                calculateRow(newRow, diffs, \"-\");\n                dataPointCallBack(newRow, panel);\n                series.datapoints.push(newRow);\n            }\n        }\n    }\n}\n\nexport {transformers, transformDataToTable};\n"]}